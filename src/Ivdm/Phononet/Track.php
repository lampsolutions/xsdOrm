<?php

namespace Ivdm\Phononet;

/**
 * Class representing Track
 */
class Track {

    /**
     * Track number
     *
     * @property integer $trackno
     */
    private $trackno = null;

    /**
     * Set number if product consists of multiple media
     *
     * @property integer $setno
     */
    private $setno = null;

    /**
     * International Standard Recording Code
     *
     * @property string $isrc
     */
    private $isrc = null;

    /**
     * Unique track identifier, generated by PhonoNet
     *
     * @property string $pnTrackId
     */
    private $pnTrackId = null;

    /**
     * Composer
     *
     * @property string[] $composer
     */
    private $composer = null;

    /**
     * Conductor of choir or band leader
     *
     * @property string[] $conductor
     */
    private $conductor = null;

    /**
     * Orchestra
     *
     * @property string[] $orchestra
     */
    private $orchestra = null;

    /**
     * Main publisher
     *
     * @property string[] $mainPublisher
     */
    private $mainPublisher = null;

    /**
     * Main artist
     *
     * @property string[] $mainArtist
     */
    private $mainArtist = null;

    /**
     * Title
     *
     * @property mixed $title
     */
    private $title = null;

    /**
     * Title version
     *
     * @property integer $titleVersion
     */
    private $titleVersion = null;

    /**
     * Work titel belongs to (classical music)
     *
     * @property string $work
     */
    private $work = null;

    /**
     * Film ratings, german FSK (Freiwillige Selbstkontrolle) 0020017001
     *
     * @property mixed $fSK
     */
    private $fSK = null;

    /**
     * Recommended age minimum 0020017002
     *
     * @property string $recommendedAge
     */
    private $recommendedAge = null;

    /**
     * PEGI age recommendation 0020017051
     *
     * @property string $pEGIRecommendedAge
     */
    private $pEGIRecommendedAge = null;

    /**
     * PEGI warning 0020017052 - 0020017059, values: violence, bad_language, fear,
     * drug_abuse, sex, discrimination, gambling, online
     *
     * @property string $pEGI
     */
    private $pEGI = null;

    /**
     * L for recording of life performance, blank otherwise
     *
     * @property boolean $isLive
     */
    private $isLive = null;

    /**
     * Track playtime
     *
     * @property string $playtime
     */
    private $playtime = null;

    /**
     * @property \Ivdm\Phononet\TSoundType[] $sound
     */
    private $sound = null;

    /**
     * Track genre
     *
     * @property mixed $genre
     */
    private $genre = null;

    /**
     * Gets as trackno
     *
     * Track number
     *
     * @return integer
     */
    public function getTrackno() {
        return $this->trackno;
    }

    /**
     * Sets a new trackno
     *
     * Track number
     *
     * @param integer $trackno
     * @return self
     */
    public function setTrackno($trackno) {
        $this->trackno = $trackno;
        return $this;
    }

    /**
     * Gets as setno
     *
     * Set number if product consists of multiple media
     *
     * @return integer
     */
    public function getSetno() {
        return $this->setno;
    }

    /**
     * Sets a new setno
     *
     * Set number if product consists of multiple media
     *
     * @param integer $setno
     * @return self
     */
    public function setSetno($setno) {
        $this->setno = $setno;
        return $this;
    }

    /**
     * Gets as isrc
     *
     * International Standard Recording Code
     *
     * @return string
     */
    public function getIsrc() {
        return $this->isrc;
    }

    /**
     * Sets a new isrc
     *
     * International Standard Recording Code
     *
     * @param string $isrc
     * @return self
     */
    public function setIsrc($isrc) {
        $this->isrc = $isrc;
        return $this;
    }

    /**
     * Gets as pnTrackId
     *
     * Unique track identifier, generated by PhonoNet
     *
     * @return string
     */
    public function getPnTrackId() {
        return $this->pnTrackId;
    }

    /**
     * Sets a new pnTrackId
     *
     * Unique track identifier, generated by PhonoNet
     *
     * @param string $pnTrackId
     * @return self
     */
    public function setPnTrackId($pnTrackId) {
        $this->pnTrackId = $pnTrackId;
        return $this;
    }

    /**
     * Adds as composer
     *
     * Composer
     *
     * @return self
     * @param string $composer
     */
    public function addToComposer($composer) {
        $this->composer[] = $composer;
        return $this;
    }

    /**
     * isset composer
     *
     * Composer
     *
     * @param scalar $index
     * @return boolean
     */
    public function issetComposer($index) {
        return isset($this->composer[$index]);
    }

    /**
     * unset composer
     *
     * Composer
     *
     * @param scalar $index
     * @return void
     */
    public function unsetComposer($index) {
        unset($this->composer[$index]);
    }

    /**
     * Gets as composer
     *
     * Composer
     *
     * @return string[]
     */
    public function getComposer() {
        return $this->composer;
    }

    /**
     * Sets a new composer
     *
     * Composer
     *
     * @param string $composer
     * @return self
     */
    public function setComposer(array $composer) {
        $this->composer = $composer;
        return $this;
    }

    /**
     * Adds as conductor
     *
     * Conductor of choir or band leader
     *
     * @return self
     * @param string $conductor
     */
    public function addToConductor($conductor) {
        $this->conductor[] = $conductor;
        return $this;
    }

    /**
     * isset conductor
     *
     * Conductor of choir or band leader
     *
     * @param scalar $index
     * @return boolean
     */
    public function issetConductor($index) {
        return isset($this->conductor[$index]);
    }

    /**
     * unset conductor
     *
     * Conductor of choir or band leader
     *
     * @param scalar $index
     * @return void
     */
    public function unsetConductor($index) {
        unset($this->conductor[$index]);
    }

    /**
     * Gets as conductor
     *
     * Conductor of choir or band leader
     *
     * @return string[]
     */
    public function getConductor() {
        return $this->conductor;
    }

    /**
     * Sets a new conductor
     *
     * Conductor of choir or band leader
     *
     * @param string $conductor
     * @return self
     */
    public function setConductor(array $conductor) {
        $this->conductor = $conductor;
        return $this;
    }

    /**
     * Adds as orchestra
     *
     * Orchestra
     *
     * @return self
     * @param string $orchestra
     */
    public function addToOrchestra($orchestra) {
        $this->orchestra[] = $orchestra;
        return $this;
    }

    /**
     * isset orchestra
     *
     * Orchestra
     *
     * @param scalar $index
     * @return boolean
     */
    public function issetOrchestra($index) {
        return isset($this->orchestra[$index]);
    }

    /**
     * unset orchestra
     *
     * Orchestra
     *
     * @param scalar $index
     * @return void
     */
    public function unsetOrchestra($index) {
        unset($this->orchestra[$index]);
    }

    /**
     * Gets as orchestra
     *
     * Orchestra
     *
     * @return string[]
     */
    public function getOrchestra() {
        return $this->orchestra;
    }

    /**
     * Sets a new orchestra
     *
     * Orchestra
     *
     * @param string $orchestra
     * @return self
     */
    public function setOrchestra(array $orchestra) {
        $this->orchestra = $orchestra;
        return $this;
    }

    /**
     * Adds as mainPublisher
     *
     * Main publisher
     *
     * @return self
     * @param string $mainPublisher
     */
    public function addToMainPublisher($mainPublisher) {
        $this->mainPublisher[] = $mainPublisher;
        return $this;
    }

    /**
     * isset mainPublisher
     *
     * Main publisher
     *
     * @param scalar $index
     * @return boolean
     */
    public function issetMainPublisher($index) {
        return isset($this->mainPublisher[$index]);
    }

    /**
     * unset mainPublisher
     *
     * Main publisher
     *
     * @param scalar $index
     * @return void
     */
    public function unsetMainPublisher($index) {
        unset($this->mainPublisher[$index]);
    }

    /**
     * Gets as mainPublisher
     *
     * Main publisher
     *
     * @return string[]
     */
    public function getMainPublisher() {
        return $this->mainPublisher;
    }

    /**
     * Sets a new mainPublisher
     *
     * Main publisher
     *
     * @param string $mainPublisher
     * @return self
     */
    public function setMainPublisher(array $mainPublisher) {
        $this->mainPublisher = $mainPublisher;
        return $this;
    }

    /**
     * Adds as mainArtist
     *
     * Main artist
     *
     * @return self
     * @param string $mainArtist
     */
    public function addToMainArtist($mainArtist) {
        $this->mainArtist[] = $mainArtist;
        return $this;
    }

    /**
     * isset mainArtist
     *
     * Main artist
     *
     * @param scalar $index
     * @return boolean
     */
    public function issetMainArtist($index) {
        return isset($this->mainArtist[$index]);
    }

    /**
     * unset mainArtist
     *
     * Main artist
     *
     * @param scalar $index
     * @return void
     */
    public function unsetMainArtist($index) {
        unset($this->mainArtist[$index]);
    }

    /**
     * Gets as mainArtist
     *
     * Main artist
     *
     * @return string[]
     */
    public function getMainArtist() {
        return $this->mainArtist;
    }

    /**
     * Sets a new mainArtist
     *
     * Main artist
     *
     * @param string $mainArtist
     * @return self
     */
    public function setMainArtist(array $mainArtist) {
        $this->mainArtist = $mainArtist;
        return $this;
    }

    /**
     * Gets as title
     *
     * Title
     *
     * @return mixed
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * Sets a new title
     *
     * Title
     *
     * @param mixed $title
     * @return self
     */
    public function setTitle($title) {
        $this->title = $title;
        return $this;
    }

    /**
     * Gets as titleVersion
     *
     * Title version
     *
     * @return integer
     */
    public function getTitleVersion() {
        return $this->titleVersion;
    }

    /**
     * Sets a new titleVersion
     *
     * Title version
     *
     * @param integer $titleVersion
     * @return self
     */
    public function setTitleVersion($titleVersion) {
        $this->titleVersion = $titleVersion;
        return $this;
    }

    /**
     * Gets as work
     *
     * Work titel belongs to (classical music)
     *
     * @return string
     */
    public function getWork() {
        return $this->work;
    }

    /**
     * Sets a new work
     *
     * Work titel belongs to (classical music)
     *
     * @param string $work
     * @return self
     */
    public function setWork($work) {
        $this->work = $work;
        return $this;
    }

    /**
     * Gets as fSK
     *
     * Film ratings, german FSK (Freiwillige Selbstkontrolle) 0020017001
     *
     * @return mixed
     */
    public function getFSK() {
        return $this->fSK;
    }

    /**
     * Sets a new fSK
     *
     * Film ratings, german FSK (Freiwillige Selbstkontrolle) 0020017001
     *
     * @param mixed $fSK
     * @return self
     */
    public function setFSK($fSK) {
        $this->fSK = $fSK;
        return $this;
    }

    /**
     * Gets as recommendedAge
     *
     * Recommended age minimum 0020017002
     *
     * @return string
     */
    public function getRecommendedAge() {
        return $this->recommendedAge;
    }

    /**
     * Sets a new recommendedAge
     *
     * Recommended age minimum 0020017002
     *
     * @param string $recommendedAge
     * @return self
     */
    public function setRecommendedAge($recommendedAge) {
        $this->recommendedAge = $recommendedAge;
        return $this;
    }

    /**
     * Gets as pEGIRecommendedAge
     *
     * PEGI age recommendation 0020017051
     *
     * @return string
     */
    public function getPEGIRecommendedAge() {
        return $this->pEGIRecommendedAge;
    }

    /**
     * Sets a new pEGIRecommendedAge
     *
     * PEGI age recommendation 0020017051
     *
     * @param string $pEGIRecommendedAge
     * @return self
     */
    public function setPEGIRecommendedAge($pEGIRecommendedAge) {
        $this->pEGIRecommendedAge = $pEGIRecommendedAge;
        return $this;
    }

    /**
     * Gets as pEGI
     *
     * PEGI warning 0020017052 - 0020017059, values: violence, bad_language, fear,
     * drug_abuse, sex, discrimination, gambling, online
     *
     * @return string
     */
    public function getPEGI() {
        return $this->pEGI;
    }

    /**
     * Sets a new pEGI
     *
     * PEGI warning 0020017052 - 0020017059, values: violence, bad_language, fear,
     * drug_abuse, sex, discrimination, gambling, online
     *
     * @param string $pEGI
     * @return self
     */
    public function setPEGI($pEGI) {
        $this->pEGI = $pEGI;
        return $this;
    }

    /**
     * Gets as isLive
     *
     * L for recording of life performance, blank otherwise
     *
     * @return boolean
     */
    public function getIsLive() {
        return $this->isLive;
    }

    /**
     * Sets a new isLive
     *
     * L for recording of life performance, blank otherwise
     *
     * @param boolean $isLive
     * @return self
     */
    public function setIsLive($isLive) {
        $this->isLive = $isLive;
        return $this;
    }

    /**
     * Gets as playtime
     *
     * Track playtime
     *
     * @return string
     */
    public function getPlaytime() {
        return $this->playtime;
    }

    /**
     * Sets a new playtime
     *
     * Track playtime
     *
     * @param string $playtime
     * @return self
     */
    public function setPlaytime($playtime) {
        $this->playtime = $playtime;
        return $this;
    }

    /**
     * Adds as sound
     *
     * @return self
     * @param \Ivdm\Phononet\TSoundType $sound
     */
    public function addToSound(\Ivdm\Phononet\TSoundType $sound) {
        $this->sound[] = $sound;
        return $this;
    }

    /**
     * isset sound
     *
     * @param scalar $index
     * @return boolean
     */
    public function issetSound($index) {
        return isset($this->sound[$index]);
    }

    /**
     * unset sound
     *
     * @param scalar $index
     * @return void
     */
    public function unsetSound($index) {
        unset($this->sound[$index]);
    }

    /**
     * Gets as sound
     *
     * @return \Ivdm\Phononet\TSoundType[]
     */
    public function getSound() {
        return $this->sound;
    }

    /**
     * Sets a new sound
     *
     * @param \Ivdm\Phononet\TSoundType[] $sound
     * @return self
     */
    public function setSound(array $sound) {
        $this->sound = $sound;
        return $this;
    }

    /**
     * Gets as genre
     *
     * Track genre
     *
     * @return mixed
     */
    public function getGenre() {
        return $this->genre;
    }

    /**
     * Sets a new genre
     *
     * Track genre
     *
     * @param mixed $genre
     * @return self
     */
    public function setGenre($genre) {
        $this->genre = $genre;
        return $this;
    }


}

